"""
Test Sistema de Fallback "Scans Sin Plan"
Verifica que los scans se guarden cuando no hay plan y se apliquen cuando se carga el plan
"""
import sys
import time
from datetime import datetime
from zoneinfo import ZoneInfo
from app.services.dual_db import DualDatabaseSystem
from app.config import settings

def test_fallback_initialization():
    """Test 1: Verificar que la tabla scans_sin_plan existe"""
    print("\n" + "="*60)
    print("TEST 1: Inicializaci√≥n de Tabla scans_sin_plan")
    print("="*60)
    
    db = DualDatabaseSystem()
    
    # Verificar que la tabla existe
    with db._get_sqlite_connection(timeout=2.0) as conn:
        cursor = conn.execute("""
            SELECT name FROM sqlite_master 
            WHERE type='table' AND name='scans_sin_plan'
        """)
        table_exists = cursor.fetchone()
    
    assert table_exists, "‚ùå Tabla scans_sin_plan no existe"
    print("‚úÖ Tabla scans_sin_plan existe")
    
    # Verificar columnas esperadas
    with db._get_sqlite_connection(timeout=2.0) as conn:
        cursor = conn.execute("PRAGMA table_info(scans_sin_plan)")
        columns = {row[1] for row in cursor.fetchall()}
    
    expected_cols = {
        'id', 'scan_id', 'linea', 'nparte', 'lote', 'cantidad', 
        'fecha', 'ts', 'scan_format', 'aplicado', 'aplicado_a_plan_id', 'aplicado_at'
    }
    
    missing = expected_cols - columns
    assert not missing, f"‚ùå Faltan columnas: {missing}"
    print(f"‚úÖ Todas las columnas esperadas presentes: {len(columns)}")
    
    return True

def test_scan_without_plan():
    """Test 2: Insertar directamente en scans_sin_plan (simula escaneo sin plan)"""
    print("\n" + "="*60)
    print("TEST 2: Simulaci√≥n de Escaneo SIN Plan Activo")
    print("="*60)
    
    db = DualDatabaseSystem()
    linea_test = "TEST_M1"
    nparte_test = "99999-TEST-FALLBACK"
    lote_test = "LOT123"
    
    # Limpiar datos de test previos
    with db._get_sqlite_connection(timeout=2.0) as conn:
        conn.execute("DELETE FROM scans_sin_plan WHERE linea = ?", (linea_test,))
        conn.execute("DELETE FROM plan_local WHERE line = ?", (linea_test,))
        conn.execute("DELETE FROM scans_local WHERE linea = ?", (linea_test,))
        conn.commit()
    
    print(f"üßπ Datos de test limpiados para l√≠nea: {linea_test}")
    
    # Simular que se guardaron scans sin plan (insertando directamente)
    today = datetime.now(ZoneInfo(settings.TZ)).strftime('%Y-%m-%d')
    now = datetime.now(ZoneInfo(settings.TZ)).isoformat()
    
    with db._get_sqlite_connection(timeout=2.0) as conn:
        # Insertar scan dummy en scans_local
        conn.execute("""
            INSERT INTO scans_local (raw, nparte, lote, linea, cantidad, scan_format, fecha, ts)
            VALUES (?, ?, ?, ?, 1, 'QR', ?, ?)
        """, (f"QR-{nparte_test}", nparte_test, lote_test, linea_test, today, now))
        scan_id_qr = conn.execute("SELECT last_insert_rowid()").fetchone()[0]
        
        conn.execute("""
            INSERT INTO scans_local (raw, nparte, lote, linea, cantidad, scan_format, fecha, ts)
            VALUES (?, ?, ?, ?, 1, 'BARCODE', ?, ?)
        """, (f"BC-{nparte_test}", nparte_test, lote_test, linea_test, today, now))
        scan_id_bc = conn.execute("SELECT last_insert_rowid()").fetchone()[0]
        
        # Insertar en scans_sin_plan (simula el comportamiento cuando no hay plan)
        conn.execute("""
            INSERT INTO scans_sin_plan 
            (scan_id, linea, nparte, lote, cantidad, fecha, ts, scan_format, aplicado)
            VALUES (?, ?, ?, ?, 1, ?, ?, 'QR', 0)
        """, (scan_id_qr, linea_test, nparte_test, lote_test, today, now))
        
        conn.execute("""
            INSERT INTO scans_sin_plan 
            (scan_id, linea, nparte, lote, cantidad, fecha, ts, scan_format, aplicado)
            VALUES (?, ?, ?, ?, 1, ?, ?, 'BARCODE', 0)
        """, (scan_id_bc, linea_test, nparte_test, lote_test, today, now))
        
        conn.commit()
    
    print(f"‚úÖ 2 scans insertados simulando comportamiento sin plan (QR + BARCODE)")
    
    # Verificar que se guardaron en scans_sin_plan
    with db._get_sqlite_connection(timeout=2.0) as conn:
        scans_sin_plan = conn.execute("""
            SELECT id, scan_id, nparte, scan_format, aplicado, ts
            FROM scans_sin_plan
            WHERE linea = ? AND aplicado = 0
            ORDER BY id
        """, (linea_test,)).fetchall()
    
    print(f"\nüìä Scans en scans_sin_plan: {len(scans_sin_plan)}")
    for scan in scans_sin_plan:
        print(f"   ID:{scan[0]} | ScanID:{scan[1]} | Parte:{scan[2]} | Tipo:{scan[3]} | Aplicado:{scan[4]}")
    
    assert len(scans_sin_plan) == 2, f"‚ùå Se esperaban 2 scans, encontrados: {len(scans_sin_plan)}"
    print(f"‚úÖ Mecanismo de fallback funciona: scans guardados cuando no hay plan")
    
    return True

def test_apply_scans_when_plan_loaded():
    """Test 3: Aplicar scans pendientes cuando se carga el plan"""
    print("\n" + "="*60)
    print("TEST 3: Aplicar Scans al Cargar Plan")
    print("="*60)
    
    db = DualDatabaseSystem()
    linea_test = "TEST_M2"
    nparte_test = "88888-TEST-APPLY"
    lote_test = "LOTAPPLY123"
    
    # Limpiar datos de test
    with db._get_sqlite_connection(timeout=2.0) as conn:
        conn.execute("DELETE FROM scans_sin_plan WHERE linea = ?", (linea_test,))
        conn.execute("DELETE FROM plan_local WHERE line = ?", (linea_test,))
        conn.execute("DELETE FROM scans_local WHERE linea = ?", (linea_test,))
        conn.commit()
    
    print(f"üßπ Datos de test limpiados")
    
    # PASO 1: Insertar scans "hu√©rfanos" directamente en scans_sin_plan
    today = datetime.now(ZoneInfo(settings.TZ)).strftime('%Y-%m-%d')
    now = datetime.now(ZoneInfo(settings.TZ)).isoformat()
    
    with db._get_sqlite_connection(timeout=2.0) as conn:
        # Insertar scan dummy en scans_local primero
        conn.execute("""
            INSERT INTO scans_local (raw, nparte, lote, linea, cantidad, scan_format, fecha, ts)
            VALUES (?, ?, ?, ?, 1, 'QR', ?, ?)
        """, (f"TEST-QR-{nparte_test}", nparte_test, lote_test, linea_test, today, now))
        scan_id_qr = conn.execute("SELECT last_insert_rowid()").fetchone()[0]
        
        conn.execute("""
            INSERT INTO scans_local (raw, nparte, lote, linea, cantidad, scan_format, fecha, ts)
            VALUES (?, ?, ?, ?, 1, 'BARCODE', ?, ?)
        """, (f"TEST-BC-{nparte_test}", nparte_test, lote_test, linea_test, today, now))
        scan_id_bc = conn.execute("SELECT last_insert_rowid()").fetchone()[0]
        
        # Insertar en scans_sin_plan
        conn.execute("""
            INSERT INTO scans_sin_plan 
            (scan_id, linea, nparte, lote, cantidad, fecha, ts, scan_format, aplicado)
            VALUES (?, ?, ?, ?, 1, ?, ?, 'QR', 0)
        """, (scan_id_qr, linea_test, nparte_test, lote_test, today, now))
        
        conn.execute("""
            INSERT INTO scans_sin_plan 
            (scan_id, linea, nparte, lote, cantidad, fecha, ts, scan_format, aplicado)
            VALUES (?, ?, ?, ?, 1, ?, ?, 'BARCODE', 0)
        """, (scan_id_bc, linea_test, nparte_test, lote_test, today, now))
        
        conn.commit()
    
    print(f"‚úÖ 2 scans insertados en scans_sin_plan (QR + BARCODE)")
    
    # PASO 2: Crear un plan para esa parte
    with db._get_sqlite_connection(timeout=2.0) as conn:
        conn.execute("""
            INSERT INTO plan_local 
            (line, part_no, lot_no, plan_count, produced_count, working_date, status, sequence, updated_at)
            VALUES (?, ?, ?, 100, 0, ?, 'EN PROGRESO', 1, ?)
        """, (linea_test, nparte_test, lote_test, today, now))
        plan_id = conn.execute("SELECT last_insert_rowid()").fetchone()[0]
        conn.commit()
    
    print(f"‚úÖ Plan creado: ID={plan_id}, Parte={nparte_test}, Producido=0")
    
    # Verificar scans pendientes ANTES de aplicar
    with db._get_sqlite_connection(timeout=2.0) as conn:
        pendientes_antes = conn.execute("""
            SELECT COUNT(*) FROM scans_sin_plan 
            WHERE linea = ? AND aplicado = 0
        """, (linea_test,)).fetchone()[0]
    
    print(f"\nüìä Scans pendientes ANTES de aplicar: {pendientes_antes}")
    
    # PASO 3: Llamar a _aplicar_scans_pendientes
    print("\nüîÑ Aplicando scans pendientes...")
    db._aplicar_scans_pendientes()
    
    # PASO 4: Verificar que se aplicaron
    with db._get_sqlite_connection(timeout=2.0) as conn:
        # Verificar scans marcados como aplicados
        aplicados = conn.execute("""
            SELECT COUNT(*) FROM scans_sin_plan 
            WHERE linea = ? AND aplicado = 1
        """, (linea_test,)).fetchone()[0]
        
        # Verificar que produced_count se increment√≥
        plan = conn.execute("""
            SELECT produced_count FROM plan_local WHERE id = ?
        """, (plan_id,)).fetchone()
    
    produced_count = plan[0] if plan else 0
    
    print(f"\nüìä Resultados:")
    print(f"   Scans aplicados: {aplicados}")
    print(f"   Producido (plan): {produced_count}")
    
    assert aplicados == 2, f"‚ùå Se esperaban 2 scans aplicados, encontrados: {aplicados}"
    assert produced_count == 1, f"‚ùå Se esperaba produced_count=1 (1 par), encontrado: {produced_count}"
    
    print("‚úÖ Scans aplicados correctamente al plan")
    
    return True

def test_get_scans_sin_plan_count():
    """Test 4: Verificar m√©todo get_scans_sin_plan_count()"""
    print("\n" + "="*60)
    print("TEST 4: M√©todo get_scans_sin_plan_count()")
    print("="*60)
    
    db = DualDatabaseSystem()
    linea_test = "TEST_M3"
    timestamp = int(time.time() * 1000)  # Usar timestamp para evitar duplicados
    
    # Limpiar y crear datos de test
    with db._get_sqlite_connection(timeout=2.0) as conn:
        conn.execute("DELETE FROM scans_sin_plan WHERE linea = ?", (linea_test,))
        
        # Insertar 3 scans dummy pendientes
        today = datetime.now(ZoneInfo(settings.TZ)).strftime('%Y-%m-%d')
        now = datetime.now(ZoneInfo(settings.TZ)).isoformat()
        
        for i in range(3):
            raw_unique = f"TEST-{timestamp}-{i}"
            conn.execute("""
                INSERT INTO scans_local (raw, nparte, linea, cantidad, scan_format, fecha, ts)
                VALUES (?, ?, ?, 1, 'QR', ?, ?)
            """, (raw_unique, f"PART-{timestamp}-{i}", linea_test, today, now))
            scan_id = conn.execute("SELECT last_insert_rowid()").fetchone()[0]
            
            conn.execute("""
                INSERT INTO scans_sin_plan 
                (scan_id, linea, nparte, cantidad, fecha, ts, scan_format, aplicado)
                VALUES (?, ?, ?, 1, ?, ?, 'QR', 0)
            """, (scan_id, linea_test, f"PART-{timestamp}-{i}", today, now))
        
        conn.commit()
    
    # Probar m√©todo sin filtro de l√≠nea
    count_total = db.get_scans_sin_plan_count()
    print(f"üìä Total scans sin plan (todas l√≠neas): {count_total}")
    
    # Probar m√©todo con filtro de l√≠nea
    count_linea = db.get_scans_sin_plan_count(linea=linea_test)
    print(f"üìä Scans sin plan para {linea_test}: {count_linea}")
    
    assert count_linea == 3, f"‚ùå Se esperaban 3 scans, encontrados: {count_linea}"
    assert count_total >= 3, f"‚ùå Total deber√≠a ser >= 3, encontrado: {count_total}"
    
    print("‚úÖ M√©todo get_scans_sin_plan_count() funciona correctamente")
    
    return True

def test_cleanup_old_scans():
    """Test 5: Verificar limpieza de scans antiguos al iniciar"""
    print("\n" + "="*60)
    print("TEST 5: Limpieza de Scans Antiguos")
    print("="*60)
    
    db = DualDatabaseSystem()
    linea_test = "TEST_M4"
    timestamp = int(time.time() * 1000)  # Usar timestamp para evitar duplicados
    
    # Insertar scan de d√≠a anterior
    yesterday = "2024-10-27"
    now = datetime.now(ZoneInfo(settings.TZ)).isoformat()
    
    with db._get_sqlite_connection(timeout=2.0) as conn:
        conn.execute("DELETE FROM scans_sin_plan WHERE linea = ?", (linea_test,))
        
        # Insertar scan dummy del d√≠a anterior con raw √∫nico
        raw_old = f"OLD-SCAN-{timestamp}"
        conn.execute("""
            INSERT INTO scans_local (raw, nparte, linea, cantidad, scan_format, fecha, ts)
            VALUES (?, ?, ?, 1, 'QR', ?, ?)
        """, (raw_old, "OLD-PART", linea_test, yesterday, now))
        scan_id = conn.execute("SELECT last_insert_rowid()").fetchone()[0]
        
        conn.execute("""
            INSERT INTO scans_sin_plan 
            (scan_id, linea, nparte, cantidad, fecha, ts, scan_format, aplicado)
            VALUES (?, ?, ?, 1, ?, ?, 'QR', 0)
        """, (scan_id, linea_test, "OLD-PART", yesterday, now))
        
        conn.commit()
        
        # Contar antes de cleanup
        before_count = conn.execute("""
            SELECT COUNT(*) FROM scans_sin_plan 
            WHERE linea = ? AND aplicado = 0
        """, (linea_test,)).fetchone()[0]
    
    print(f"üìä Scans antiguos ANTES de cleanup: {before_count}")
    
    # Ejecutar cleanup (se ejecuta autom√°ticamente al iniciar, pero lo llamamos manualmente)
    db._cleanup_on_startup()
    
    # Verificar despu√©s de cleanup
    with db._get_sqlite_connection(timeout=2.0) as conn:
        after_count = conn.execute("""
            SELECT COUNT(*) FROM scans_sin_plan 
            WHERE linea = ? AND aplicado = 0 AND fecha < ?
        """, (linea_test, datetime.now(ZoneInfo(settings.TZ)).strftime('%Y-%m-%d'))).fetchone()[0]
    
    print(f"üìä Scans antiguos DESPU√âS de cleanup: {after_count}")
    
    assert after_count == 0, f"‚ùå Deber√≠an eliminarse scans antiguos, encontrados: {after_count}"
    print("‚úÖ Cleanup de scans antiguos funciona correctamente")
    
    return True

def run_all_tests():
    """Ejecuta todos los tests del sistema de fallback"""
    print("\n" + "üî•"*30)
    print("INICIANDO TESTS DE SISTEMA FALLBACK (SCANS SIN PLAN)")
    print("üî•"*30)
    
    tests = [
        ("Inicializaci√≥n Tabla", test_fallback_initialization),
        ("Escaneo Sin Plan", test_scan_without_plan),
        ("Aplicar al Cargar Plan", test_apply_scans_when_plan_loaded),
        ("M√©todo Count", test_get_scans_sin_plan_count),
        ("Cleanup Antiguos", test_cleanup_old_scans),
    ]
    
    passed = 0
    failed = 0
    
    for name, test_func in tests:
        try:
            if test_func():
                passed += 1
                print(f"\n‚úÖ {name} - PAS√ì")
            else:
                failed += 1
                print(f"\n‚ùå {name} - FALL√ì")
        except Exception as e:
            failed += 1
            print(f"\n‚ùå {name} - ERROR: {e}")
            import traceback
            traceback.print_exc()
    
    # Resumen final
    print("\n" + "="*60)
    print("RESUMEN DE TESTS")
    print("="*60)
    print(f"‚úÖ Pasaron: {passed}/{len(tests)}")
    print(f"‚ùå Fallaron: {failed}/{len(tests)}")
    
    if failed == 0:
        print("\nüéâ TODOS LOS TESTS PASARON üéâ")
        print("El sistema de fallback funciona correctamente")
        print("\nüìã Funcionalidades verificadas:")
        print("   1. Tabla scans_sin_plan existe con columnas correctas")
        print("   2. Scans sin plan se guardan autom√°ticamente")
        print("   3. Scans se aplican cuando se carga el plan")
        print("   4. M√©todo de conteo funciona correctamente")
        print("   5. Cleanup de scans antiguos funciona")
    else:
        print(f"\n‚ö†Ô∏è  {failed} test(s) fallaron")
        sys.exit(1)

if __name__ == "__main__":
    run_all_tests()
